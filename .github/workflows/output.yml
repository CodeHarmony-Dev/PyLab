name: 输出测评结果

on:
  workflow_run:
    workflows: ["测评学习者代码"] # 监听 evaluate.yml 工作流
    types:
      - completed

permissions:
  contents: write    # 允许修改仓库内容（用于合并PR）
  pull-requests: write    # 允许更新PR状态和评论PR
  issues: write    # 允许评论issues

jobs:
  comment-and-merge:
    runs-on: ubuntu-latest
    name: 评论和合并
    steps:
      - name: 下载测评结果
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "evaluation-results"
            );
            
            if (!matchArtifact) {
              throw new Error('找不到测评结果文件');
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            });
            
            const fs = require('fs');
            fs.writeFileSync('evaluation-results.zip', Buffer.from(download.data));
            
            await exec.exec('unzip evaluation-results.zip');
            
            const exitCode = fs.readFileSync('exit_code.txt', 'utf8').trim();
            const details = fs.readFileSync('details.txt', 'utf8').trim();
            
            core.setOutput('exitCode', exitCode);
            core.setOutput('details', details);

      - name: 处理测评结果
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          script: |
            const fs = require('fs');
            const exitCode = fs.readFileSync('exit_code.txt', 'utf8').trim();
            const details = fs.readFileSync('details.txt', 'utf8').trim();
            
            console.log(`测评工作流结论: ${context.payload.workflow_run.conclusion}`);
            console.log(`获取到测评结果 - 退出码: ${exitCode}`);
            console.log(`测评详情: ${details}`);

            let commentBody = '';
            let passed = false;

            try {
              if (exitCode !== '0') {
                commentBody = `❌ **测评脚本执行失败**，退出码: ${exitCode}\n\n这可能是由系统问题导致的，而非您代码的问题。请联系仓库维护者寻求帮助。`;
              } else {
                let resultObj;
                try {
                  resultObj = JSON.parse(details);
                } catch (parseError) {
                  console.error(`JSON 解析失败: ${parseError.message}`);
                  console.error(`原始数据: ${details}`);
                  commentBody = `❌ **测评结果解析失败！**\n\n这是测评系统内部问题，请联系仓库维护者寻求帮助。`;
                  return;
                }

                if (resultObj.error) {
                  commentBody = `❌ **测评过程发生错误！**\n\n这可能是测评系统的问题，请联系仓库维护者寻求帮助。`;
                } else {
                  const allPassed = resultObj.every(item => item.passed === true);
                  const hasTableError = resultObj.some(item => item.table_update_error);

                  passed = allPassed && !hasTableError;

                  if (passed) {
                    commentBody = '✅ **测评通过！** 恭喜您成功完成了本次实验任务！';
                  } else if (hasTableError) {
                    commentBody = '❌ **测评未通过 - 成绩表更新错误**\n\n在更新成绩表过程中发生错误，这可能是系统问题。请联系仓库维护者寻求帮助。';
                  } else {
                    let failedLabs = [];
                    resultObj.forEach(lab => {
                      if (!lab.passed) {
                        let labSummary = `**实验 ${lab.lab_num}**: `;

                        let passedTasks = 0;
                        let failedTasks = 0;
                        let hasError = false;

                        Object.values(lab.tasks).forEach(task => {
                          if (task.returncode === 0) {
                            passedTasks++;
                          } else {
                            failedTasks++;
                            if (task.error) hasError = true;
                          }
                        });

                        labSummary += `通过 ${passedTasks} 个任务，失败 ${failedTasks} 个任务`;
                        if (hasError) labSummary += "（代码执行过程中出现错误）";

                        failedLabs.push(labSummary);
                      }
                    });

                    commentBody = '❌ **测评未通过**\n\n' + failedLabs.join('\n') + '\n\n请检查您的代码并解决问题。修改后重新提交PR即可重新触发测评。';
                  }
                }
              }

              // 获取PR编号
              const pull_request_number = await getPullRequestNumber(github, context);
              
              if (!pull_request_number) {
                throw new Error('无法获取PR编号');
              }

              // 创建评论
              await github.rest.issues.createComment({
                issue_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });

              // 如果测试通过，合并PR
              if (passed) {
                await github.rest.pulls.merge({
                  pull_number: pull_request_number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  merge_method: 'merge'
                });
              }
            } catch (error) {
              console.error(`处理测评结果时发生错误: ${error.message}`);
              console.error(error.stack);
              
              const pull_request_number = await getPullRequestNumber(github, context);
              
              if (pull_request_number) {
                await github.rest.issues.createComment({
                  issue_number: pull_request_number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `❌ **测评结果处理失败！**\n\n这是测评系统内部问题，请联系仓库维护者寻求帮助。\n\n错误信息：${error.message}`
                });
              }
            }

      - name: 获取PR编号
        id: get-pr-number
        uses: actions/github-script@v6
        with:
          script: |
            async function getPullRequestNumber(github, context) {
              const response = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.payload.workflow_run.head_sha
              });
              
              if (response.data.length > 0) {
                return response.data[0].number;
              }
              return null;
            }
            
            return await getPullRequestNumber(github, context);

name: 输出测评结果

on:
  workflow_run:
    workflows: ["测评学习者代码"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process-results:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: 下载测评结果
        id: download-results
        uses: actions/github-script@v7
        with:
          script: |
            //===================================================
            // 1. 下载测评结果压缩包
            //===================================================
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "evaluation-results"
            })[0];

            if (!matchArtifact) {
              throw new Error('找不到测评结果文件');
            }

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });

            const fs = require('fs');
            fs.writeFileSync('evaluation-results.zip', Buffer.from(download.data));

      - name: 解压测评结果
        run: unzip evaluation-results.zip

      - name: 处理测评结果
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            //===================================================
            // 2. 辅助函数定义
            //===================================================

            // 2.1 验证JSON数据结构的函数
            function validateResultStructure(data) {
                if (!data || typeof data !== 'object') return false;
                if (!('validation' in data) || typeof data.validation !== 'object') return false;
                if (!('evaluation' in data) || typeof data.evaluation !== 'object') return false;
                return true;
            }

            // 2.2 验证评测结果对象的函数
            function validateEvaluationResult(result) {
                console.log('Validating result:', JSON.stringify(result, null, 2));
                
                // 处理错误结果的情况
                if (result.error) {
                    return true; // 允许包含error字段的结果通过验证
                }
                
                if (!Array.isArray(result)) return false;
                return result.every(item => {
                    const isValid = item && 
                                  typeof item === 'object' && 
                                  'passed' in item && 
                                  'lab_num' in item &&
                                  'tasks' in item;
                    
                    if (!isValid) {
                        console.log('Invalid item:', item);
                    }
                    return isValid;
                });
            }

            // 2.3 处理测评结果并生成评论内容
            function processEvaluationResults(resultObj) {
                // 处理错误结果
                if (resultObj.error === 'validation_failed') {
                    return {
                        passed: false,
                        systemError: true,
                        commentBody: '❌ **测评系统错误**\n\n在处理测评结果时发生了问题。这是系统内部错误，而非您代码的问题。\n\n我们已经记录了这个问题，并会尽快修复。如果问题持续存在，请在Issue中报告这个问题。'
                    };
                }
                
                const allPassed = resultObj.every(item => item.passed === true);
                const hasTableError = resultObj.some(item => item.table_update_error);

                if (allPassed && !hasTableError) {
                    return {
                        passed: true,
                        systemError: false,
                        commentBody: '✅ **测评通过！** 恭喜您成功完成了本次实验任务！'
                    };
                }

                if (hasTableError) {
                    return {
                        passed: false,
                        systemError: true,
                        commentBody: '❌ **测评未通过 - 成绩表更新错误**\n\n在更新成绩表过程中发生错误，这是系统问题。我们已经记录了这个问题，并会尽快修复。\n\n如果问题持续存在，请在Issue中报告这个问题。'
                    };
                }

                let failedLabs = [];
                resultObj.forEach(lab => {
                    if (!lab.passed) {
                        let labSummary = generateLabSummary(lab);
                        failedLabs.push(labSummary);
                    }
                });

                return {
                    passed: false,
                    systemError: false,
                    commentBody: '❌ **测评未通过**\n\n' + failedLabs.join('\n\n') + '\n\n请检查您的代码并解决问题。修改后重新提交PR即可重新触发测评。'
                };
            }

            // 2.4 生成单个实验的总结信息
            function generateLabSummary(lab) {
                let labSummary = `**实验 ${lab.lab_num}**: `;
                let passedTasks = 0;
                let failedTasks = 0;
                let hasError = false;

                Object.entries(lab.tasks).forEach(([taskName, task]) => {
                    if (task.returncode === 0) {
                        passedTasks++;
                    } else {
                        failedTasks++;
                        if (task.error) {
                            hasError = true;
                            labSummary += `\n- ${taskName}: ${task.error}`;
                        }
                    }
                });

                labSummary += `\n通过 ${passedTasks} 个任务，失败 ${failedTasks} 个任务`;
                if (hasError) labSummary += "\n（详细错误信息请见上方）";
                return labSummary;
            }

            // 2.5 处理评论和PR合并
            async function handleCommentAndMerge(github, context, pr_number, commentBody, passed, systemError) {
                try {
                    await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: pr_number,
                        body: commentBody
                    });

                    if (systemError) {
                        const issueBody = `测评过程中发生系统错误\n\nPR: #${pr_number}\n\n错误信息：\n\`\`\`\n${commentBody}\n\`\`\`\n\n请相关开发人员尽快检查并修复问题。`;
                        await github.rest.issues.create({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            title: `测评系统错误 - PR #${pr_number}`,
                            body: issueBody,
                            labels: ['bug', 'evaluation-error']
                        });
                    }

                    if (passed && !systemError) {
                        await github.rest.pulls.merge({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            pull_number: pr_number,
                            merge_method: 'merge'
                        });
                    }
                } catch (error) {
                    console.error('创建评论或合并PR时发生错误:', error);
                    throw error;
                }
            }

            //===================================================
            // 3. 主处理逻辑
            //===================================================

            // 3.1 初始化变量
            let results;
            let commentBody = '';
            let passed = false;
            let systemError = false;
            let pr_number;

            try {
                const rawData = fs.readFileSync('evaluation_results.json', 'utf8');
                results = JSON.parse(rawData);
                
                pr_number = results.pr_number;  // 从结果文件中获取PR号
                if (!pr_number) {
                    throw new Error('无法获取PR号码');
                }

                // 3.3 验证数据结构
                if (!validateResultStructure(results)) {
                    throw new Error('测评结果数据结构无效');
                }

                const { validation, evaluation } = results;

                // 3.4 验证提交格式
                if (!validation.valid) {
                    commentBody = `❌ **提交格式验证失败**\n\n请确保：\n1. 所有文件都在 submit 目录下\n2. 文件路径格式为 submit/用户名/lab数字/\n3. PR提交者的用户名与提交路径中的用户名一致\n\n修改后重新提交PR即可重新触发验证。`;
                    return;
                }

                // 3.5 检查测评脚本执行状态
                if (evaluation.exit_code !== 0) {
                    systemError = true;
                    commentBody = `❌ **测评脚本执行失败**，退出码: ${evaluation.exit_code}\n\n这可能是由系统问题导致的，而非您代码的问题。我们已经记录了这个问题，并会尽快修复。\n\n如果问题持续存在，请在Issue中报告这个问题。`;
                    return;
                }

                // 3.6 解析测评结果
                const resultObj = evaluation.result;
                console.log('Raw evaluation result:', JSON.stringify(resultObj, null, 2));
                
                if (!validateEvaluationResult(resultObj)) {
                    console.log('Validation failed for evaluation result');
                    throw new Error('评测结果格式无效');
                }

                // 3.7 处理测评结果
                const processedResults = processEvaluationResults(resultObj);
                passed = processedResults.passed;
                systemError = processedResults.systemError;
                commentBody = processedResults.commentBody;

            } catch (error) {
                console.error('处理测评结果时发生错误:', error);
                console.error('当前上下文:', {
                    results: results,
                    pr_number: pr_number,
                    commentBody: commentBody
                });
                
                systemError = true;
                commentBody = `❌ **测评系统错误**\n\n处理测评结果时发生错误：${error.message}\n\n这是测评系统内部问题，我们已经记录了这个错误。如果问题持续存在，请在Issue中报告这个问题。`;
                core.setFailed(`测评系统错误: ${error.message}`);
            } finally {
                if (pr_number) {
                    try {
                        await handleCommentAndMerge(github, context, pr_number, commentBody, passed, systemError);
                    } catch (error) {
                        core.setFailed(`创建评论或合并PR失败: ${error.message}`);
                    }
                } else {
                    console.error('未能获取PR号码，跳过评论和合并操作');
                    core.setFailed('未能获取PR号码');
                }
            } 